name: Quality Checks

on:
  push:
    branches: [ main, develop, comprehensive-improvements ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Verify the installation
      run: flutter doctor -v
    
    - name: Run analyzer
      run: flutter analyze --fatal-infos
    
    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Run tests
      run: flutter test --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        fail_ci_if_error: true

  build-android:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Android APK
      run: flutter build apk --release
    
    - name: Build Android App Bundle
      run: flutter build appbundle --release

  build-windows:
    runs-on: windows-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Windows
      run: flutter build windows --release

  build-linux:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Linux
      run: flutter build linux --release

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run security audit
      run: flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | .name' | xargs -I {} echo "Checking {}"
    
    - name: Check for known vulnerabilities
      run: |
        # This is a placeholder for actual security scanning
        echo "Security scan completed"

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Run performance tests
      run: |
        # This is a placeholder for actual performance testing
        echo "Performance tests completed"
        # flutter test integration_test/performance_test.dart

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Check code metrics
      run: |
        echo "Checking code complexity..."
        find lib -name "*.dart" -exec wc -l {} + | sort -n | tail -10
        echo "Files with most lines:"
        find lib -name "*.dart" -exec wc -l {} + | sort -nr | head -5
    
    - name: Check for TODOs and FIXMEs
      run: |
        echo "Checking for TODOs and FIXMEs..."
        grep -r "TODO\|FIXME\|HACK\|XXX" lib/ || echo "No TODOs/FIXMEs found"
    
    - name: Check for debug prints
      run: |
        echo "Checking for debug prints..."
        grep -r "print\|debugPrint" lib/ | wc -l || echo "No debug prints found"